{"version":3,"sources":["webpack:///./src/lib/components/FilePicker.react.js"],"names":["setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","FilePicker","props","id","multipleSelectionAllowed","multiple_selection_allowed","otherProps","file_map","rootFolderId","fileMap","console","log","Object","keys","length","setProps","getFolderChain","currentFolderId","currentFolder","folderChain","parentId","parentFile","unshift","useState","setCurrentFolderId","useEffect","files","childrenIds","map","fileId","handleFileAction","data","ChonkyActions","ChangeSelection","selection","payload","selectedFiles","Array","from","MouseClickFile","clickType","currentId","file","currentIdArray","OpenFiles","targetFile","fileToOpen","isDirectory","actionsToDisable","OpenSelection","push","SelectAllFiles","ClearSelection","EnableListView","defaultProps","selected_files","id_to_refresh","root_folder_id","propTypes","PropTypes","string","bool","array","object","func"],"mappings":"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","file":"cd14b60-main-wps-hmr.js","sourcesContent":["import {\n    ChonkyActions,\n    FileBrowser,\n    FileContextMenu,\n    FileHelper,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\nsetChonkyDefaults({\n  iconComponent: ChonkyIconFA,\n  disableDragAndDrop: true\n});\n\nexport default function FilePicker(props) {\n  // get data\n  const {\n    id,\n    multiple_selection_allowed : multipleSelectionAllowed,\n    ...otherProps\n  } = props;\n\n  const file_map = props.file_map ?? { rootFolderId : \"none\", fileMap : {} };\n  const fileMap = file_map.fileMap;\n  console.log(\"fileMap\", Object.keys(fileMap).length);\n\n  // get the setProps function, which is used to communicate\n  // changes in the props back to Dash\n  // setProps will not be defined unless this component is\n  // running in Dash, so use a dummy function in standalone mode\n  let setProps;\n  if ( props[\"setProps\"] ) {\n    setProps = props[\"setProps\"]\n  }\n  else {\n    setProps = () => {}\n  }\n\n  // determine the path of the current folder relative\n  // to the root of the tree\n  function getFolderChain(currentFolderId) {\n    const currentFolder = fileMap[currentFolderId];\n    const folderChain = [currentFolder];\n\n    let parentId = currentFolder.parentId;\n    while (parentId) {\n      const parentFile = fileMap[parentId];\n      if (parentFile) {\n        folderChain.unshift(parentFile);\n        parentId = parentFile.parentId;\n      } else {\n        parentId = null;\n      }\n    }\n\n    return folderChain;\n  }\n  \n  // currentFolderId is the current root (rather than the actual\n  // root of the whole tree)\n  const [currentFolderId, setCurrentFolderId] = useState(file_map.rootFolderId);\n  useEffect(() => {\n    console.log(\"setting root folder id to\", currentFolderId);\n    setProps({ \"root_folder_id\" : currentFolderId });\n  }, [currentFolderId]);\n\n  // determine which files are in the current folder\n  const currentFolder = fileMap[currentFolderId];\n  //console.log(\"children\", currentFolder.childrenIds);\n  const files = currentFolder.childrenIds\n      ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)\n      : [];\n\n  //console.log(\"files\", files);\n  const folderChain = getFolderChain(currentFolderId);\n\n  function handleFileAction(data) {\n    // // when a file is clicked on...\n    // if ( data.id === ChonkyActions.MouseClickFile.id ) {\n    //   const clickType = data.payload.clickType;\n    //   const currentId = data.payload.file.id || \"none\";\n    //   const currentIdArray = [ currentId ];\n    //   const isDirectory = fileMap[currentId][\"isDir\"] === true;\n    //   console.log(\">\", clickType, \"click\");\n    //   if ( currentId != \"none\" ) {\n        \n    //     if ( isDirectory ) {\n\n    //     }\n    //   }\n    // }\n\n    // update selection when in multiple selection mode\n    if ( multipleSelectionAllowed && data.id === ChonkyActions.ChangeSelection.id ) {\n      const { selection } = data.payload;\n      const selectedFiles = Array.from(selection);\n      console.log(\"multiple selection\", selectedFiles);\n      setProps({\"selected_files\" : selectedFiles})\n    }\n\n    // update selection when in single selection mode\n    if ( !multipleSelectionAllowed && data.id === ChonkyActions.MouseClickFile.id ) {\n      const clickType = data.payload.clickType;\n      if ( clickType == 'single' ) {\n        const currentId = data.payload.file.id || \"none\";\n        const currentIdArray = [ currentId ];\n        console.log(\"single selection:\", currentIdArray);\n        setProps({\"selected_files\" : currentIdArray});       \n      }\n    }\n\n    // when a directory is opened...\n    if (data.id === ChonkyActions.OpenFiles.id) {\n      const { targetFile, files } = data.payload;\n      const fileToOpen = targetFile ?? \"\";\n      const currentId = fileToOpen.id ?? \"\";\n      const isDirectory = fileMap[currentId][\"isDir\"] === true;\n      if (fileToOpen && isDirectory) {\n        console.log(\"> open file\", currentId);\n        setCurrentFolderId(currentId);\n      }\n    }\n  }\n\n  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]\n  if (!multipleSelectionAllowed) {\n    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);\n    actionsToDisable.push(ChonkyActions.ClearSelection.id);\n  }\n\n  return (\n      <FileBrowser\n        files={files}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        defaultFileViewActionId={ChonkyActions.EnableListView.id}\n        disableDefaultFileActions={actionsToDisable}\n        disableSelection={!multipleSelectionAllowed}\n        doubleClickDelay={300}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n      </FileBrowser>\n  );\n};\n\nFilePicker.defaultProps = {\n    selected_files : [],\n    file_map : {},\n    id_to_refresh : '',\n    root_folder_id : '',\n    multiple_selection_allowed : true,\n};\n\nFilePicker.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Whether we are allowed to select multiple files\n     */\n    multiple_selection_allowed: PropTypes.bool,\n\n    /**\n     * Selected files.\n     */\n    selected_files: PropTypes.array,\n\n    /**\n     * The id of the root folder.\n     */\n    root_folder_id: PropTypes.string,\n\n    /**\n     * JSON-style dictionary containing file tree.\n     */\n    file_map: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"sourceRoot":""}