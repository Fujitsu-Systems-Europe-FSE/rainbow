{"version":3,"sources":["webpack:///./src/lib/components/FilePicker.react.js"],"names":["setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","FilePicker","props","id","multipleSelectionAllowed","multiple_selection_allowed","otherProps","file_map","rootFolderId","fileMap","console","log","Object","keys","length","setProps","getFolderChain","currentFolderId","currentFolder","folderChain","parentId","parentFile","unshift","useState","idToRefresh","setIdToRefresh","refreshId","setCurrentFolderId","useEffect","childrenIds","files","map","fileId","handleFileAction","data","ChonkyActions","MouseClickFile","clickType","payload","currentId","file","currentIdArray","isDirectory","OpenFiles","targetFile","fileToOpen","actionsToDisable","OpenSelection","push","SelectAllFiles","ClearSelection","EnableListView","defaultProps","selected_files","id_to_refresh","root_folder_id","propTypes","PropTypes","string","bool","array","object","func"],"mappings":"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","file":"a2275f2-main-wps-hmr.js","sourcesContent":["import {\n    ChonkyActions,\n    FileBrowser,\n    FileContextMenu,\n    FileHelper,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\nsetChonkyDefaults({\n  iconComponent: ChonkyIconFA,\n  disableDragAndDrop: true\n});\n\nexport default function FilePicker(props) {\n  // get data\n  const {\n    id,\n    multiple_selection_allowed : multipleSelectionAllowed,\n    ...otherProps\n  } = props;\n\n  const file_map = props.file_map ?? { rootFolderId : \"none\", fileMap : {} };\n  const fileMap = file_map.fileMap;\n  console.log(\"fileMap\", Object.keys(fileMap).length);\n\n  // get the setProps function, which is used to communicate\n  // changes in the props back to Dash\n  // setProps will not be defined unless this component is\n  // running in Dash, so use a dummy function in standalone mode\n  let setProps;\n  if ( props[\"setProps\"] ) {\n    setProps = props[\"setProps\"]\n  }\n  else {\n    setProps = () => {}\n  }\n\n  // determine the path of the current folder relative\n  // to the root of the tree\n  function getFolderChain(currentFolderId) {\n    const currentFolder = fileMap[currentFolderId];\n    const folderChain = [currentFolder];\n\n    let parentId = currentFolder.parentId;\n    while (parentId) {\n      const parentFile = fileMap[parentId];\n      if (parentFile) {\n        folderChain.unshift(parentFile);\n        parentId = parentFile.parentId;\n      } else {\n        parentId = null;\n      }\n    }\n\n    return folderChain;\n  }\n\n  // the id_to_refresh prop will be sent to Dash to tell it\n  // we need a new fileMap\n  const [idToRefresh, setIdToRefresh] = useState('');\n  function refreshId(id) {\n    // only refresh if there is a valid id\n    if ( id ) {\n      console.log(\"requested to refresh\", id);\n      setProps({ \"id_to_refresh\" : id });\n      setIdToRefresh(idToRefresh);\n    }\n  }\n  \n  // currentFolderId is the current root (rather than the actual\n  // root of the whole tree)\n  const [currentFolderId, setCurrentFolderId] = useState(file_map.rootFolderId);\n  useEffect(() => {\n    console.log(\"setting root folder id to\", currentFolderId);\n    setProps({ \"root_folder_id\" : currentFolderId });\n  }, [currentFolderId]);\n\n  // determine which files are in the current folder\n  const currentFolder = fileMap[currentFolderId];\n  console.log(\"children\", currentFolder.childrenIds);\n  const files = currentFolder.childrenIds\n      ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)\n      : [];\n\n  //console.log(\"files\", files);\n  const folderChain = getFolderChain(currentFolderId);\n\n  function handleFileAction(data) {\n    // when a file is clicked on...\n    if ( data.id === ChonkyActions.MouseClickFile.id ) {\n      const clickType = data.payload.clickType;\n      const currentId = data.payload.file.id || \"none\";\n      const currentIdArray = [ currentId ];\n      const isDirectory = fileMap[currentId][\"isDir\"] === true;\n      console.log(\">\", clickType, \"click\");\n      if ( currentId != \"none\" ) {\n        // if this is a directory, refresh it\n        if ( isDirectory ) {\n          console.log(\"requested to update\", currentId);\n          setIdToRefresh(currentId);\n        }\n      }\n    }\n\n    // when a directory is opened...\n    if (data.id === ChonkyActions.OpenFiles.id) {\n      const { targetFile, files } = data.payload;\n      const fileToOpen = targetFile ?? \"\";\n      const currentId = fileToOpen.id ?? \"\";\n      const isDirectory = fileMap[currentId][\"isDir\"] === true;\n      if (fileToOpen && isDirectory) {\n        console.log(\"> open file\", currentId);\n        setCurrentFolderId(currentId);\n      }\n    }\n  }\n      \n      // if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n      //   setProps({ \"id_to_refresh\" : fileToOpen.id })\n      //   console.log(\">>> opening\", fileToOpen.id)\n      //   setCurrentFolderId(fileToOpen.id);\n        //setProps({ \"id_to_refresh\" : fileToOpen.id });\n\n    //   // if the component is in single selection mode,\n    //   // then update the current selection\n    //   const currentFile = data.payload.file.id || \"none\";\n    //   const currentFileArray = [ currentFile ];\n    //   if (!multipleSelectionAllowed) {\n    //     setProps({ \"selected_files\" : currentFileArray});\n    //     console.log(\"current single selection:\", currentFile);\n    //   }\n\n    //   // set this file to be re-explored on the backend\n    //   if (currentFile != \"none\") {\n    //     console.log(\"requested to update\", data.payload.file.id)\n    //     setProps({ \"id_to_refresh\" : data.payload.file.id })\n    //   }\n    // }\n\n    // // if the user opens a folder, change the root folder internally\n    // if (data.id === ChonkyActions.OpenFiles.id) {\n    //   const { targetFile, files } = data.payload;\n    //   console.log(data.payload);\n    //   const fileToOpen = targetFile ?? files[0];\n    //   if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n    //     setProps({ \"id_to_refresh\" : fileToOpen.id })\n    //     console.log(\">>> opening\", fileToOpen.id)\n    //     setCurrentFolderId(fileToOpen.id);\n    //     //setProps({ \"id_to_refresh\" : fileToOpen.id });\n    //   }\n    // }\n    // // if we are in multiple selection mode and the selection changes,\n    // // then update the current selection\n    // if (multipleSelectionAllowed && \n    //     data.id === ChonkyActions.ChangeSelection.id) {\n    //   let selectedFiles = data.payload.selection;\n    //   selectedFiles = Array.from(selectedFiles);\n    //   setProps({ \"selected_files\" : selectedFiles });\n    //   console.log(\"current multiple selection:\", selectedFiles);\n    // }\n\n\n\n  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]\n  if (!multipleSelectionAllowed) {\n    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);\n    actionsToDisable.push(ChonkyActions.ClearSelection.id);\n  }\n\n  return (\n      <FileBrowser\n        files={files}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        defaultFileViewActionId={ChonkyActions.EnableListView.id}\n        disableDefaultFileActions={actionsToDisable}\n        disableSelection={!multipleSelectionAllowed}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n      </FileBrowser>\n  );\n};\n\nFilePicker.defaultProps = {\n    selected_files : [],\n    file_map : {},\n    id_to_refresh : '',\n    root_folder_id : '',\n    multiple_selection_allowed : true,\n};\n\nFilePicker.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Whether we are allowed to select multiple files\n     */\n    multiple_selection_allowed: PropTypes.bool,\n\n    /**\n     * Selected files.\n     */\n    selected_files: PropTypes.array,\n\n    /**\n     * When this id changes, Dash should explore the given id.\n     */\n    id_to_refresh: PropTypes.string,\n\n    /**\n     * The id of the root folder.\n     */\n    root_folder_id: PropTypes.string,\n\n    /**\n     * JSON-style dictionary containing file tree.\n     */\n    file_map: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"sourceRoot":""}