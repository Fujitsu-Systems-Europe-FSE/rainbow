{"version":3,"sources":["webpack:///./src/lib/components/FilePicker.react.js"],"names":["setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","FilePicker","props","id","multipleSelectionAllowed","multiple_selection_allowed","idToRefresh","id_to_refresh","setProps","otherProps","useFolderChain","currentFolderId","currentFolder","fileMap","folderChain","parentId","parentFile","unshift","useFileActionHandler","data","ChonkyActions","MouseClickFile","KeyboardClickFile","currentFile","payload","file","currentFileArray","console","log","OpenFiles","targetFile","files","fileToOpen","FileHelper","isDirectory","setCurrentFolderId","ChangeSelection","selectedFiles","selection","Array","from","file_map","rootFolderId","useState","childrenIds","map","fileId","handleFileAction","actionsToDisable","OpenSelection","push","SelectAllFiles","ClearSelection","EnableListView","defaultProps","selected_files","propTypes","PropTypes","string","bool","array","object","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAUA;AACA;AACA;AACA;AAEAA,gEAAiB,CAAC;AAChBC,eAAa,EAAEC,oEADC;AAEhBC,oBAAkB,EAAE;AAFJ,CAAD,CAAjB;AAKe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACxC,MACEC,EADF,GAMID,KANJ,CACEC,EADF;AAAA,MAE+BC,wBAF/B,GAMIF,KANJ,CAEEG,0BAFF;AAAA,MAGkBC,WAHlB,GAMIJ,KANJ,CAGEK,aAHF;AAAA,MAIEC,QAJF,GAMIN,KANJ,CAIEM,QAJF;AAAA,MAKKC,UALL,4BAMIP,KANJ;;AAQA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,eAAD,EAAqB;AAC1C,QAAMC,aAAa,GAAGC,OAAO,CAACF,eAAD,CAA7B;AACA,QAAMG,WAAW,GAAG,CAACF,aAAD,CAApB;AAEA,QAAIG,QAAQ,GAAGH,aAAa,CAACG,QAA7B;;AACA,WAAOA,QAAP,EAAiB;AACf,UAAMC,UAAU,GAAGH,OAAO,CAACE,QAAD,CAA1B;;AACA,UAAIC,UAAJ,EAAgB;AACdF,mBAAW,CAACG,OAAZ,CAAoBD,UAApB;AACAD,gBAAQ,GAAGC,UAAU,CAACD,QAAtB;AACD,OAHD,MAGO;AACLA,gBAAQ,GAAG,IAAX;AACD;AACF;;AAED,WAAOD,WAAP;AACD,GAhBD,CATwC,CA2BzC;;;AACC,MAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAU;AACnC;AACA,QAAKA,IAAI,CAAChB,EAAL,KAAYiB,oDAAa,CAACC,cAAd,CAA6BlB,EAAzC,IACAgB,IAAI,CAAChB,EAAL,KAAYiB,oDAAa,CAACE,iBAD/B,EACsD;AAEpD;AACA;AACA,UAAMC,WAAW,GAAGJ,IAAI,CAACK,OAAL,CAAaC,IAAb,CAAkBtB,EAAlB,IAAwB,MAA5C;AACA,UAAMuB,gBAAgB,GAAG,CAAEH,WAAF,CAAzB;AACAf,cAAQ,CAAC;AAAE,0BAAmBkB;AAArB,OAAD,CAAR;AACAC,aAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCL,WAAzC,EAPoD,CASpD;;AACA,UAAIA,WAAW,IAAI,MAAnB,EAA2B;AACzBf,gBAAQ,CAAC;AAAE,2BAAkBW,IAAI,CAACK,OAAL,CAAaC,IAAb,CAAkBtB;AAAtC,SAAD,CAAR;AACD;AACF,KAhBkC,CAkBnC;;;AACA,QAAIgB,IAAI,CAAChB,EAAL,KAAYiB,oDAAa,CAACS,SAAd,CAAwB1B,EAAxC,EAA4C;AAC1C,0BAA8BgB,IAAI,CAACK,OAAnC;AAAA,UAAQM,UAAR,iBAAQA,UAAR;AAAA,UAAoBC,MAApB,iBAAoBA,KAApB;AACA,UAAMC,UAAU,GAAGF,UAAH,aAAGA,UAAH,cAAGA,UAAH,GAAiBC,MAAK,CAAC,CAAD,CAAtC;;AACA,UAAIC,UAAU,IAAIC,iDAAU,CAACC,WAAX,CAAuBF,UAAvB,CAAlB,EAAsD;AAClDG,0BAAkB,CAACH,UAAU,CAAC7B,EAAZ,CAAlB,CADkD,CAElD;AACH;AACF,KAPD,CAQA;AACA;AATA,SAUK,IAAIC,wBAAwB,IACxBe,IAAI,CAAChB,EAAL,KAAYiB,oDAAa,CAACgB,eAAd,CAA8BjC,EAD9C,EACkD;AACrD,UAAIkC,aAAa,GAAGlB,IAAI,CAACK,OAAL,CAAac,SAAjC;AACAD,mBAAa,GAAGE,KAAK,CAACC,IAAN,CAAWH,aAAX,CAAhB;AACA7B,cAAQ,CAAC;AAAE,yBAAkB6B;AAApB,OAAD,CAAR;AACAV,aAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CS,aAA3C;AACD;AACJ,GApCD;;AAsCA,MAAMxB,OAAO,GAAGX,KAAK,CAACuC,QAAN,CAAe5B,OAAf,IAA0B,EAA1C,CAlEwC,CAmExC;;AACA,MAAM6B,YAAY,GAAGxC,KAAK,CAACuC,QAAN,CAAeC,YAApC;;AAEA,kBAA8CC,sDAAQ,CAACD,YAAD,CAAtD;AAAA;AAAA,MAAO/B,eAAP;AAAA,MAAwBwB,kBAAxB;;AAEA,MAAMvB,aAAa,GAAGC,OAAO,CAACF,eAAD,CAA7B;AACA,MAAMoB,KAAK,GAAGnB,aAAa,CAACgC,WAAd,GACRhC,aAAa,CAACgC,WAAd,CAA0BC,GAA1B,CAA8B,UAACC,MAAD;AAAA;;AAAA,8BAAYjC,OAAO,CAACiC,MAAD,CAAnB,6DAA+B,IAA/B;AAAA,GAA9B,CADQ,GAER,EAFN,CAzEwC,CA6ExC;;AACA,MAAMhC,WAAW,GAAGJ,cAAc,CAACC,eAAD,CAAlC;AACA,MAAMoC,gBAAgB,GAAG7B,oBAAoB,CAACiB,kBAAD,CAA7C;AAEA,MAAMa,gBAAgB,GAAG,CAAE5B,oDAAa,CAAC6B,aAAd,CAA4B9C,EAA9B,CAAzB;;AACA,MAAI,CAACC,wBAAL,EAA+B;AAC7B4C,oBAAgB,CAACE,IAAjB,CAAsB9B,oDAAa,CAAC+B,cAAd,CAA6BhD,EAAnD;AACA6C,oBAAgB,CAACE,IAAjB,CAAsB9B,oDAAa,CAACgC,cAAd,CAA6BjD,EAAnD;AACD;;AAED,sBACI,2DAAC,kDAAD;AACE,SAAK,EAAE4B,KADT;AAEE,eAAW,EAAEjB,WAFf;AAGE,gBAAY,EAAEiC,gBAHhB;AAIE,2BAAuB,EAAE3B,oDAAa,CAACiC,cAAd,CAA6BlD,EAJxD;AAKE,6BAAyB,EAAE6C,gBAL7B;AAME,oBAAgB,EAAE,CAAC5C;AANrB,kBAQE,2DAAC,iDAAD,OARF,eASE,2DAAC,kDAAD,OATF,eAUE,2DAAC,+CAAD,OAVF,CADJ;AAcD;AAAA;AAEDH,UAAU,CAACqD,YAAX,GAA0B;AACtBC,gBAAc,EAAG,EADK;AAEtBd,UAAQ,EAAG,EAFW;AAGtBlC,eAAa,EAAG,EAHM;AAItBF,4BAA0B,EAAG;AAJP,CAA1B;AAOAJ,UAAU,CAACuD,SAAX,GAAuB;AACnB;AACJ;AACA;AACIrD,IAAE,EAAEsD,iDAAS,CAACC,MAJK;;AAMnB;AACJ;AACA;AACIrD,4BAA0B,EAAEoD,iDAAS,CAACE,IATnB;;AAWnB;AACJ;AACA;AACIJ,gBAAc,EAAEE,iDAAS,CAACG,KAdP;;AAgBnB;AACJ;AACA;AACIrD,eAAa,EAAEkD,iDAAS,CAACC,MAnBN;;AAqBnB;AACJ;AACA;AACIjB,UAAQ,EAAEgB,iDAAS,CAACI,MAxBD;;AA0BnB;AACJ;AACA;AACA;AACIrD,UAAQ,EAAEiD,iDAAS,CAACK;AA9BD,CAAvB,C","file":"85d3390-main-wps-hmr.js","sourcesContent":["import {\n    ChonkyActions,\n    FileBrowser,\n    FileContextMenu,\n    FileHelper,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState } from 'react';\n\nsetChonkyDefaults({\n  iconComponent: ChonkyIconFA,\n  disableDragAndDrop: true\n});\n\nexport default function FilePicker(props) {\n  const {\n    id,\n    multiple_selection_allowed : multipleSelectionAllowed,\n    id_to_refresh : idToRefresh,\n    setProps,\n    ...otherProps\n  } = props;\n\n  const useFolderChain = (currentFolderId) => {\n    const currentFolder = fileMap[currentFolderId];\n    const folderChain = [currentFolder];\n\n    let parentId = currentFolder.parentId;\n    while (parentId) {\n      const parentFile = fileMap[parentId];\n      if (parentFile) {\n        folderChain.unshift(parentFile);\n        parentId = parentFile.parentId;\n      } else {\n        parentId = null;\n      }\n    }\n\n    return folderChain;\n  };\n\n // const useFileActionHandler = (setCurrentFolderId) => {\n  const useFileActionHandler = (data) => {\n      // when a file is clicked on...\n      if ( data.id === ChonkyActions.MouseClickFile.id ||\n           data.id === ChonkyActions.KeyboardClickFile    ) {\n        \n        // if the component is in single selection mode,\n        // then update the current selection\n        const currentFile = data.payload.file.id || \"none\";\n        const currentFileArray = [ currentFile ];\n        setProps({ \"selected_files\" : currentFileArray});\n        console.log(\"current single selection:\", currentFile);\n\n        // set this file to be re-explored on the backend\n        if (currentFile != \"none\") {\n          setProps({ \"id_to_refresh\" : data.payload.file.id })\n        }\n      }\n\n      // if the user opens a folder, change the root folder internally\n      if (data.id === ChonkyActions.OpenFiles.id) {\n        const { targetFile, files } = data.payload;\n        const fileToOpen = targetFile ?? files[0];\n        if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n            setCurrentFolderId(fileToOpen.id);\n            //setProps({ \"id_to_refresh\" : fileToOpen.id });\n        }\n      }\n      // if we are in multiple selection mode and the selection changes,\n      // then update the current selection\n      else if (multipleSelectionAllowed && \n               data.id === ChonkyActions.ChangeSelection.id) {\n        let selectedFiles = data.payload.selection;\n        selectedFiles = Array.from(selectedFiles);\n        setProps({ \"selectedFiles\" : selectedFiles });\n        console.log(\"current multiple selection:\", selectedFiles);\n      }\n  };\n\n  const fileMap = props.file_map.fileMap || {};\n  //console.log(\"fileMap\", Object.keys(fileMap).length);\n  const rootFolderId = props.file_map.rootFolderId;\n\n  const [currentFolderId, setCurrentFolderId] = useState(rootFolderId);\n\n  const currentFolder = fileMap[currentFolderId];\n  const files = currentFolder.childrenIds\n      ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)\n      : [];\n\n  //console.log(\"files\", files);\n  const folderChain = useFolderChain(currentFolderId);\n  const handleFileAction = useFileActionHandler(setCurrentFolderId);\n\n  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]\n  if (!multipleSelectionAllowed) {\n    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);\n    actionsToDisable.push(ChonkyActions.ClearSelection.id);\n  }\n\n  return (\n      <FileBrowser\n        files={files}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        defaultFileViewActionId={ChonkyActions.EnableListView.id}\n        disableDefaultFileActions={actionsToDisable}\n        disableSelection={!multipleSelectionAllowed}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n      </FileBrowser>\n  );\n};\n\nFilePicker.defaultProps = {\n    selected_files : [],\n    file_map : {},\n    id_to_refresh : '',\n    multiple_selection_allowed : true,\n};\n\nFilePicker.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Whether we are allowed to select multiple files\n     */\n    multiple_selection_allowed: PropTypes.bool,\n\n    /**\n     * Selected files.\n     */\n    selected_files: PropTypes.array,\n\n    /**\n     * When this id changes, Dash should explore the given id.\n     */\n    id_to_refresh: PropTypes.string,\n\n    /**\n     * JSON-style dictionary containing file tree.\n     */\n    file_map: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"sourceRoot":""}