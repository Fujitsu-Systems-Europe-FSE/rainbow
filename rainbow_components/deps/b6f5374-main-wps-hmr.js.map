{"version":3,"sources":["webpack:///./node_modules/react-intl/lib/index.js","webpack:///./src/lib/components/FilePicker.react.js"],"names":["setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","FilePicker","props","id","multipleSelectionAllowed","multiple_selection_allowed","idToRefresh","id_to_refresh","otherProps","setProps","useFolderChain","currentFolderId","currentFolder","fileMap","folderChain","parentId","parentFile","unshift","file_map","console","log","Object","keys","length","rootFolderId","useState","setCurrentFolderId","files","childrenIds","map","fileId","handleFileAction","data","ChonkyActions","MouseClickFile","KeyboardClickFile","currentFile","payload","file","currentFileArray","OpenFiles","targetFile","fileToOpen","FileHelper","isDirectory","ChangeSelection","selectedFiles","selection","Array","from","actionsToDisable","OpenSelection","push","SelectAllFiles","ClearSelection","EnableListView","defaultProps","selected_files","propTypes","PropTypes","string","bool","array","object","func"],"mappings":"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","file":"b6f5374-main-wps-hmr.js","sourcesContent":["import { createFormattedComponent, createFormattedDateTimePartsComponent, } from './src/components/createFormattedComponent';\nimport injectIntl, { Provider as RawIntlProvider, Context as IntlContext, } from './src/components/injectIntl';\nimport useIntl from './src/components/useIntl';\nimport IntlProvider, { createIntl } from './src/components/provider';\nimport FormattedRelativeTime from './src/components/relative';\nimport FormattedPlural from './src/components/plural';\nimport FormattedMessage from './src/components/message';\nimport FormattedDateTimeRange from './src/components/dateTimeRange';\nexport { FormattedDateTimeRange, FormattedMessage, FormattedPlural, FormattedRelativeTime, IntlContext, IntlProvider, RawIntlProvider, createIntl, injectIntl, useIntl, };\nexport { createIntlCache, UnsupportedFormatterError, InvalidConfigError, MissingDataError, MessageFormatError, MissingTranslationError, IntlErrorCode as ReactIntlErrorCode, IntlError as ReactIntlError, } from '@formatjs/intl';\nexport function defineMessages(msgs) {\n    return msgs;\n}\nexport function defineMessage(msg) {\n    return msg;\n}\n// IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./src/types').CustomFormatConfig`\nexport var FormattedDate = createFormattedComponent('formatDate');\nexport var FormattedTime = createFormattedComponent('formatTime');\n// @ts-ignore issue w/ TS Intl types\nexport var FormattedNumber = createFormattedComponent('formatNumber');\nexport var FormattedList = createFormattedComponent('formatList');\nexport var FormattedDisplayName = createFormattedComponent('formatDisplayName');\nexport var FormattedDateParts = createFormattedDateTimePartsComponent('formatDate');\nexport var FormattedTimeParts = createFormattedDateTimePartsComponent('formatTime');\nexport { FormattedNumberParts, FormattedListParts, } from './src/components/createFormattedComponent';\n","import {\n    ChonkyActions,\n    FileBrowser,\n    FileContextMenu,\n    FileHelper,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState } from 'react';\n\nsetChonkyDefaults({\n  iconComponent: ChonkyIconFA,\n  disableDragAndDrop: true\n});\n\nexport default function FilePicker(props) {\n  const {\n    id,\n    multiple_selection_allowed : multipleSelectionAllowed,\n    id_to_refresh : idToRefresh,\n    ...otherProps\n  } = props;\n\n  // setProps will not be defined unless this is running in Dash,\n  // so just set it to a dummy function\n  let setProps;\n  if ( props[\"setProps\"] ) {\n    setProps = props[\"setProps\"]\n  }\n  else {\n    setProps = () => {}\n  }\n\n  const useFolderChain = (currentFolderId) => {\n    const currentFolder = fileMap[currentFolderId];\n    const folderChain = [currentFolder];\n\n    let parentId = currentFolder.parentId;\n    while (parentId) {\n      const parentFile = fileMap[parentId];\n      if (parentFile) {\n        folderChain.unshift(parentFile);\n        parentId = parentFile.parentId;\n      } else {\n        parentId = null;\n      }\n    }\n\n    return folderChain;\n  };\n\n  const fileMap = props.file_map.fileMap || {};\n  console.log(\"fileMap\", Object.keys(fileMap).length);\n  const rootFolderId = props.file_map.rootFolderId;\n\n  const [currentFolderId, setCurrentFolderId] = useState(rootFolderId);\n\n  const currentFolder = fileMap[currentFolderId];\n  const files = currentFolder.childrenIds\n      ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)\n      : [];\n\n  //console.log(\"files\", files);\n  const folderChain = useFolderChain(currentFolderId);\n\n  function handleFileAction(data) {\n    // when a file is clicked on...\n    if ( data.id === ChonkyActions.MouseClickFile.id ||\n         data.id === ChonkyActions.KeyboardClickFile    ) {\n      console.log(\"click\");\n\n      // if the component is in single selection mode,\n      // then update the current selection\n      const currentFile = data.payload.file.id || \"none\";\n      const currentFileArray = [ currentFile ];\n      if (!multipleSelectionAllowed) {\n        setProps({ \"selected_files\" : currentFileArray});\n        console.log(\"current single selection:\", currentFile);\n      }\n      \n      // set this file to be re-explored on the backend\n      if (currentFile != \"none\") {\n        console.log(\"requested to update\", data.payload.file.id)\n        setProps({ \"id_to_refresh\" : data.payload.file.id })\n      }\n    }\n\n    // if the user opens a folder, change the root folder internally\n    if (data.id === ChonkyActions.OpenFiles.id) {\n      const { targetFile, files } = data.payload;\n      const fileToOpen = targetFile ?? files[0];\n      if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n          setCurrentFolderId(fileToOpen.id);\n          //setProps({ \"id_to_refresh\" : fileToOpen.id });\n      }\n    }\n    // if we are in multiple selection mode and the selection changes,\n    // then update the current selection\n    else if (multipleSelectionAllowed && \n             data.id === ChonkyActions.ChangeSelection.id) {\n      let selectedFiles = data.payload.selection;\n      selectedFiles = Array.from(selectedFiles);\n      setProps({ \"selectedFiles\" : selectedFiles });\n      console.log(\"current multiple selection:\", selectedFiles);\n    }\n\n  }\n\n\n  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]\n  if (!multipleSelectionAllowed) {\n    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);\n    actionsToDisable.push(ChonkyActions.ClearSelection.id);\n  }\n\n  return (\n      <FileBrowser\n        files={files}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        defaultFileViewActionId={ChonkyActions.EnableListView.id}\n        disableDefaultFileActions={actionsToDisable}\n        disableSelection={!multipleSelectionAllowed}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n      </FileBrowser>\n  );\n};\n\nFilePicker.defaultProps = {\n    selected_files : [],\n    file_map : {},\n    id_to_refresh : '',\n    multiple_selection_allowed : true,\n};\n\nFilePicker.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Whether we are allowed to select multiple files\n     */\n    multiple_selection_allowed: PropTypes.bool,\n\n    /**\n     * Selected files.\n     */\n    selected_files: PropTypes.array,\n\n    /**\n     * When this id changes, Dash should explore the given id.\n     */\n    id_to_refresh: PropTypes.string,\n\n    /**\n     * JSON-style dictionary containing file tree.\n     */\n    file_map: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"sourceRoot":""}