{"version":3,"sources":["webpack:///./src/lib/components/FilePicker.react.js"],"names":["setChonkyDefaults","iconComponent","ChonkyIconFA","disableDragAndDrop","FilePicker","props","id","multipleSelectionAllowed","multiple_selection_allowed","otherProps","file_map","rootFolderId","fileMap","setProps","useFiles","currentFolderId","useMemo","currentFolder","files","childrenIds","map","fileId","useFolderChain","folderChain","parentId","parentFile","unshift","useFileActionHandler","setCurrentFolderId","useCallback","data","ChonkyActions","OpenFiles","payload","targetFile","fileToOpen","FileHelper","isDirectory","ChangeSelection","selection","selectedFiles","Array","from","console","log","MouseClickFile","clickType","currentId","file","currentIdArray","useState","useEffect","handleFileAction","actionsToDisable","OpenSelection","push","SelectAllFiles","ClearSelection","EnableListView","defaultProps","selected_files","root_folder_id","propTypes","PropTypes","string","bool","array","object","func"],"mappings":"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","file":"2b2ad16-main-wps-hmr.js","sourcesContent":["import {\n    ChonkyActions,\n    FileBrowser,\n    FileContextMenu,\n    FileHelper,\n    FileList,\n    FileNavbar,\n    FileToolbar,\n    setChonkyDefaults,\n} from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useState, useEffect, useMemo, useCallback } from 'react';\n\nsetChonkyDefaults({\n  iconComponent: ChonkyIconFA,\n  disableDragAndDrop: true\n});\n\nexport default function FilePicker(props) {\n  // get data\n  const {\n    id,\n    multiple_selection_allowed : multipleSelectionAllowed,\n    ...otherProps\n  } = props;\n\n  const file_map = props.file_map ?? { rootFolderId : \"none\", fileMap : {} };\n  const fileMap = file_map.fileMap;\n\n  // get the setProps function, which is used to communicate\n  // changes in the props back to Dash\n  // setProps will not be defined unless this component is\n  // running in Dash, so use a dummy function in standalone mode\n  let setProps;\n  if ( props[\"setProps\"] ) {\n    setProps = props[\"setProps\"]\n  }\n  else {\n    setProps = () => {}\n  }\n\n  const useFiles = (currentFolderId) => {\n    return useMemo(() => {\n      const currentFolder = fileMap[currentFolderId];\n      const files = currentFolder.childrenIds\n          ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)\n          : [];\n      return files;\n    }, [currentFolderId, file_map]);\n  };\n\n  const useFolderChain = (currentFolderId) => {\n    return useMemo(() => {\n      const currentFolder = fileMap[currentFolderId];\n      const folderChain = [currentFolder];\n\n      let parentId = currentFolder.parentId;\n      while (parentId) {\n        const parentFile = fileMap[parentId];\n        if (parentFile) {\n            folderChain.unshift(parentFile);\n            parentId = parentFile.parentId;\n        } else {\n            parentId = null;\n        }\n      }\n\n      return folderChain;\n    }, [currentFolderId, file_map]);\n  };\n\n  const useFileActionHandler = (setCurrentFolderId) => {\n    return useCallback((data) => {\n      if (data.id === ChonkyActions.OpenFiles.id) {\n        const { targetFile, files } = data.payload;\n        const fileToOpen = targetFile ?? files[0];\n        if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n            setCurrentFolderId(fileToOpen.id);\n            setProps({\"selected_files\" : []});\n        }\n      }\n      else if ( multipleSelectionAllowed && data.id === ChonkyActions.ChangeSelection.id ) {\n        const { selection } = data.payload;\n        const selectedFiles = Array.from(selection);\n        console.log(\"multiple selection\", selectedFiles);\n        setProps({\"selected_files\" : selectedFiles})\n      }\n      else if ( !multipleSelectionAllowed && data.id === ChonkyActions.MouseClickFile.id ) {\n        const clickType = data.payload.clickType;\n        if ( clickType == \"single\" ) {\n          const currentId = data.payload.file.id || \"none\";\n          const currentIdArray = [ currentId ];         \n          console.log(\"single selection:\", currentIdArray);\n          setProps({\"selected_files\" : currentIdArray});\n        }\n      }\n    },\n    [setCurrentFolderId]);\n  }\n\n    /// update selection when in multiple selection mode\n    // if ( multipleSelectionAllowed ) {\n    //   if (data.id === ChonkyActions.ChangeSelection.id ) {\n    //     const { selection } = data.payload;\n    //     const selectedFiles = Array.from(selection);\n    //     console.log(\"multiple selection\", selectedFiles);\n    //     setProps({\"selected_files\" : selectedFiles})\n    //     setLastSelectedFile(data.payload.file.id);\n    //     console.log(\"1 set last to\", data.payload.file.id);\n    //   }\n    //   else if (data.id === ChonkyActions.MouseClickFile.id ) {\n    //     const currentId = data.payload.file.id || \"none\";\n    //     const currentIdArray = [ currentId ];\n    //     const isDirectory = fileMap[currentId][\"isDir\"] === true;\n    //     console.log( lastSelectedFile, currentId, lastSelectedFile == currentId, isDirectory);\n    //     if ( lastSelectedFile == currentId && isDirectory ) {\n    //       console.log(\"> open folder\", currentId);\n    //       setCurrentFolderId(currentId);\n    //       setLastSelectedFile(null);\n    //       console.log(\"2 set last to null\");\n    //       setProps({\"selected_files\" : []});\n    //     }\n    //   }\n    // }\n\n    // // update selection when in single selection mode\n    // if ( !multipleSelectionAllowed )\n    //   if (data.id === ChonkyActions.MouseClickFile.id ) {\n    //   const clickType = data.payload.clickType;\n    //   if ( clickType == 'single' ) {\n    //     const currentId = data.payload.file.id || \"none\";\n    //     const currentIdArray = [ currentId ];\n    //     const isDirectory = fileMap[currentId][\"isDir\"] === true;\n\n    //     if ( lastSelectedFile == currentId && isDirectory ) {\n    //       console.log(\"> open folder\", currentId);\n    //       setCurrentFolderId(currentId);\n    //       setProps({\"selected_files\" : []});\n    //       setLastSelectedFile(null);\n    //       console.log(\"3 set last to null\");\n    //     }\n    //     else {\n    //       console.log(\"single selection:\", currentIdArray);\n    //       setProps({\"selected_files\" : currentIdArray});\n    //       setLastSelectedFile(currentId);\n    //       console.log(\"4 set last to\", currentId)\n    //     }   \n    //   }\n    // }\n\n    // // when a directory is opened...\n    // if (data.id === ChonkyActions.OpenFiles.id) {\n    //   const { targetFile, files } = data.payload;\n    //   const fileToOpen = targetFile ?? \"\";\n    //   const currentId = fileToOpen.id ?? \"\";\n    //   const isDirectory = fileMap[currentId][\"isDir\"] === true;\n    //   if (fileToOpen && isDirectory) {\n    //     console.log(\"> open folder\", currentId);\n    //     setCurrentFolderId(currentId);\n    //     setProps({\"selected_files\" : []})\n    //     setLastSelectedFile(null);\n    //     console.log(\"5 set last to null\");\n    //   }\n    // }\n\n  //   console.log(\"-------end\")\n  // }\n\n  const [currentFolderId, setCurrentFolderId] = useState(file_map.rootFolderId);\n  const files = useFiles(currentFolderId);\n  useEffect(() => {\n    console.log(\"setting root folder id to\", currentFolderId);\n    setProps({ \"root_folder_id\" : currentFolderId });\n  }, [currentFolderId]);\n  const folderChain = useFolderChain(currentFolderId);\n  const handleFileAction = useFileActionHandler(setCurrentFolderId);\n\n  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]\n  if (!multipleSelectionAllowed) {\n    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);\n    actionsToDisable.push(ChonkyActions.ClearSelection.id);\n  }\n\n  return (\n      <FileBrowser\n        files={files}\n        folderChain={folderChain}\n        onFileAction={handleFileAction}\n        defaultFileViewActionId={ChonkyActions.EnableListView.id}\n        disableDefaultFileActions={actionsToDisable}\n        disableSelection={!multipleSelectionAllowed}\n      >\n        <FileNavbar />\n        <FileToolbar />\n        <FileList />\n      </FileBrowser>\n  );\n};\n\nFilePicker.defaultProps = {\n    selected_files : [],\n    file_map : {},\n    root_folder_id : '',\n    multiple_selection_allowed : true,\n};\n\nFilePicker.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Whether we are allowed to select multiple files\n     */\n    multiple_selection_allowed: PropTypes.bool,\n\n    /**\n     * Selected files.\n     */\n    selected_files: PropTypes.array,\n\n    /**\n     * The id of the root folder.\n     */\n    root_folder_id: PropTypes.string,\n\n    /**\n     * JSON-style dictionary containing file tree.\n     */\n    file_map: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"sourceRoot":""}