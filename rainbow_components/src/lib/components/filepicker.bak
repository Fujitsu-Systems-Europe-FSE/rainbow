import {
    ChonkyActions,
    FileBrowser,
    FileContextMenu,
    FileHelper,
    FileList,
    FileNavbar,
    FileToolbar,
    setChonkyDefaults,
} from 'chonky';
import { ChonkyIconFA } from 'chonky-icon-fontawesome';
import PropTypes from 'prop-types';
import React from 'react';
import { useState, useEffect } from 'react';

setChonkyDefaults({
  iconComponent: ChonkyIconFA,
  disableDragAndDrop: true
});

export default function FilePicker(props) {
  // get data
  const {
    id,
    multiple_selection_allowed : multipleSelectionAllowed,
    ...otherProps
  } = props;

  const file_map = props.file_map ?? { rootFolderId : "none", fileMap : {} };
  const fileMap = file_map.fileMap;
  console.log("=======")
  console.log("fileMap", Object.keys(fileMap).length);

  // get the setProps function, which is used to communicate
  // changes in the props back to Dash
  // setProps will not be defined unless this component is
  // running in Dash, so use a dummy function in standalone mode
  let setProps;
  if ( props["setProps"] ) {
    setProps = props["setProps"]
  }
  else {
    setProps = () => {}
  }

  // determine the path of the current folder relative
  // to the root of the tree
  function getFolderChain(currentFolderId) {
    const currentFolder = fileMap[currentFolderId];
    const folderChain = [currentFolder];

    let parentId = currentFolder.parentId;
    while (parentId) {
      const parentFile = fileMap[parentId];
      if (parentFile) {
        folderChain.unshift(parentFile);
        parentId = parentFile.parentId;
      } else {
        parentId = null;
      }
    }

    return folderChain;
  }
  
  // currentFolderId is the current root (rather than the actual
  // root of the whole tree)
  const [currentFolderId, setCurrentFolderId] = useState(file_map.rootFolderId);
  useEffect(() => {
    console.log("setting root folder id to", currentFolderId);
    setProps({ "root_folder_id" : currentFolderId });
  }, [currentFolderId]);

  // determine which files are in the current folder
  const currentFolder = fileMap[currentFolderId];
  //console.log("children", currentFolder.childrenIds);
  const files = currentFolder.childrenIds
      ? currentFolder.childrenIds.map((fileId) => fileMap[fileId] ?? null)
      : [];

  //console.log("files", files);
  const folderChain = getFolderChain(currentFolderId);

  const [lastSelectedFile, setLastSelectedFile] = useState(null);
  function handleFileAction(data) {
    console.log("-------start")
    console.log(data);

    /// update selection when in multiple selection mode
    if ( multipleSelectionAllowed ) {
      if (data.id === ChonkyActions.ChangeSelection.id ) {
        const { selection } = data.payload;
        const selectedFiles = Array.from(selection);
        console.log("multiple selection", selectedFiles);
        setProps({"selected_files" : selectedFiles})
        setLastSelectedFile(data.payload.file.id);
        console.log("1 set last to", data.payload.file.id);
      }
      else if (data.id === ChonkyActions.MouseClickFile.id ) {
        const currentId = data.payload.file.id || "none";
        const currentIdArray = [ currentId ];
        const isDirectory = fileMap[currentId]["isDir"] === true;
        console.log( lastSelectedFile, currentId, lastSelectedFile == currentId, isDirectory);
        if ( lastSelectedFile == currentId && isDirectory ) {
          console.log("> open folder", currentId);
          setCurrentFolderId(currentId);
          setLastSelectedFile(null);
          console.log("2 set last to null");
          setProps({"selected_files" : []});
        }
      }
    }

    // update selection when in single selection mode
    if ( !multipleSelectionAllowed )
      if (data.id === ChonkyActions.MouseClickFile.id ) {
      const clickType = data.payload.clickType;
      if ( clickType == 'single' ) {
        const currentId = data.payload.file.id || "none";
        const currentIdArray = [ currentId ];
        const isDirectory = fileMap[currentId]["isDir"] === true;

        if ( lastSelectedFile == currentId && isDirectory ) {
          console.log("> open folder", currentId);
          setCurrentFolderId(currentId);
          setProps({"selected_files" : []});
          setLastSelectedFile(null);
          console.log("3 set last to null");
        }
        else {
          console.log("single selection:", currentIdArray);
          setProps({"selected_files" : currentIdArray});
          setLastSelectedFile(currentId);
          console.log("4 set last to", currentId)
        }   
      }
    }

    // when a directory is opened...
    if (data.id === ChonkyActions.OpenFiles.id) {
      const { targetFile, files } = data.payload;
      const fileToOpen = targetFile ?? "";
      const currentId = fileToOpen.id ?? "";
      const isDirectory = fileMap[currentId]["isDir"] === true;
      if (fileToOpen && isDirectory) {
        console.log("> open folder", currentId);
        setCurrentFolderId(currentId);
        setProps({"selected_files" : []})
        setLastSelectedFile(null);
        console.log("5 set last to null");
      }
    }

    console.log("-------end")
  }

  const actionsToDisable = [ ChonkyActions.OpenSelection.id ]
  if (!multipleSelectionAllowed) {
    actionsToDisable.push(ChonkyActions.SelectAllFiles.id);
    actionsToDisable.push(ChonkyActions.ClearSelection.id);
  }

  return (
      <FileBrowser
        files={files}
        folderChain={folderChain}
        onFileAction={handleFileAction}
        defaultFileViewActionId={ChonkyActions.EnableListView.id}
        disableDefaultFileActions={actionsToDisable}
        disableSelection={!multipleSelectionAllowed}
      >
        <FileNavbar />
        <FileToolbar />
        <FileList />
      </FileBrowser>
  );
};

FilePicker.defaultProps = {
    selected_files : [],
    file_map : {},
    root_folder_id : '',
    multiple_selection_allowed : true,
};

FilePicker.propTypes = {
    /**
     * The ID used to identify this component in Dash callbacks.
     */
    id: PropTypes.string,

    /**
     * Whether we are allowed to select multiple files
     */
    multiple_selection_allowed: PropTypes.bool,

    /**
     * Selected files.
     */
    selected_files: PropTypes.array,

    /**
     * The id of the root folder.
     */
    root_folder_id: PropTypes.string,

    /**
     * JSON-style dictionary containing file tree.
     */
    file_map: PropTypes.object,

    /**
     * Dash-assigned callback that should be called to report property changes
     * to Dash, to make them available for callbacks.
     */
    setProps: PropTypes.func
};
